#!/bin/bash

## TODO: This should be more well rounded. Convert to .cbz, .cbr or .epub

# Change independent field seperator
SAVEIFS=$IFS
IFS=$'\n'

# Do some identification and misc work
APP_PATH="$( cd "$(dirname "$0")" ; pwd -P )"
APP_NAME="$(basename "$0")"
BASE_APP_PATH=`echo $APP_PATH | sed -e 's/Contents\/MacOS//g'`
RANDOM_NUMBER=`awk 'BEGIN{srand();print int(rand()*(20))}'`

# Check for preferred notifier.
check_gem=`gem list terminal-notifier -i`

# Set up some functions
function success_completion () {
  if [[ $check_gem == "true" ]]; then
    echo "Completed all files" | terminal-notifier -title $APP_NAME -sound default -contentImage "${BASE_APP_PATH}/Contents/Resources/icns/${RANDOM_NUMBER}.icns"
  else
    osascript -e "display notification \"Completed all files\" with title \"$APP_NAME\""
  fi
}
function success () {
  if [[ $check_gem == "true" ]]; then
    echo "Completed: $@" | terminal-notifier -title $APP_NAME -contentImage "${BASE_APP_PATH}/Contents/Resources/icns/${RANDOM_NUMBER}.icns"
  else
    osascript -e "display notification \"Completed: $@\" with title \"$APP_NAME\""
  fi
}
function killed () {
  if [[ $check_gem == "true" ]]; then
    echo "$APP_NAME Killed" | terminal-notifier -title $APP_NAME -sound Basso -contentImage "${BASE_APP_PATH}/Contents/Resources/icns/${RANDOM_NUMBER}.icns"
  else
    osascript -e "display notification \"$APP_NAME Killed\" with title \"$APP_NAME\""
  fi
}
function failure () {
  if [[ $check_gem == "true" ]]; then
    echo "Failed: $@" | terminal-notifier -title $APP_NAME -sound Basso -contentImage "${BASE_APP_PATH}/Contents/Resources/icns/${RANDOM_NUMBER}.icns"
  else
    osascript -e "display notification \"Failed: $@\" with title \"$APP_NAME\""
  fi
}
function error {
  if [[ $check_gem == "true" ]]; then
    echo "Exiting: Error" | terminal-notifier -title $APP_NAME -sound Basso -contentImage "${BASE_APP_PATH}/Contents/Resources/icns/${RANDOM_NUMBER}.icns"
  else
    osascript -e "display notification \"Exiting: Error\" with title \"$APP_NAME\""
  fi
}
# Misc work and Errors
function cut_string () {
  echo $@ | cut -d ":" -f 2
}
function check_removal () {
  if [[ $? == 1 ]]; then
    IFS=$SAVEIFS
    exit 1
  fi
}
function check_bool () {
  if [[ $? == 1 ]]; then
    IFS=$SAVEIFS
    error
    exit 1
  fi
}
function kill_app () {
  pids=`ps -ef | grep $APP_NAME | grep "/bin/bash" | awk '{print $2}'`
  for pid in $pids; do
    kill $pid
    killed
    IFS=$SAVEIFS
    exit 0
  done
}

# User workflow
input_selector=`osascript -e 'tell app "System Events" to display dialog "Select a File or Folder?" buttons {"Cancel","Folder","File"} default button 3 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/icns/'$RANDOM_NUMBER'.icns"}'` 
check_bool $input_selector
input_selection=`cut_string $input_selector`

# Do a check for input selection file/folder and create array
if [[ $input_selection == "File" ]]; then
  files=`osascript -e 'tell application "System Events" to return POSIX path of (choose file)'`
  check_bool $files
  file_list=`find "$files"`
  input_directory=`dirname "$files"`
elif [[ $input_selection == "Folder" ]]; then
  files=`osascript -e 'tell application "System Events" to return POSIX path of (choose folder)'`
  check_bool $files
  file_list=`find "$files" -iname "*.mkv"`
  input_directory="$files"  
elif [[ $input_selection == "Kill" ]]; then
  kill_app
fi


output_selector=`osascript -e 'tell app "System Events" to display dialog "Select Output Directory." buttons {"Cancel","Select","Default"} default button 3 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/icns/'$RANDOM_NUMBER'.icns"}'`
check_bool $output_selector
output_selection=`cut_string $output_selector`

if [[ $output_selector != "Default" ]]; then 
  output_directory=`osascript -e 'tell application "System Events" to return POSIX path of (choose folder)'`
  check_bool $output_directory
fi

# Do the work
for file in $file_list; do
  if [[ $output_selector == "Default" ]]; then
    output_directory=`dirname $file`
  fi
  filename=`basename $file | sed "s/....$//"`
  $BASE_APP_PATH/Contents/Resources/bin/unrar "$file" -o $BASE_APP_PATH/Contents/Resources/temp/$filename
  images=`find $BASE_APP_PATH/Contents/Resources/temp/$filename/ -type f`
  zip -j "$output_directory/$filename.cbz" $images
  check_bool
  rm -rf $BASE_APP_PATH/Contents/Resources/temp/$filename
  success "$filename.cbz"
done

# Clean any leftovers
rm -rf $BASE_APP_PATH/Contents/Resources/temp/*
REMOVE_CBR=`osascript -e 'tell app "System Events" to display dialog "Remove old .cbr?" default button 2 with title "'$APP_NAME'" with icon {"'$BASE_APP_PATH'/Contents/Resources/icns/'$RANDOM_NUMBER'.icns"}'`
check_removal $REMOVE_CBR
for file in $file_list; do
  rm "$file"
done

# Set IFS back to defaults
IFS=$SAVEIFS

success_completion
exit 0